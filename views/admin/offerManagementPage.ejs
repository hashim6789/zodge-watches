<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Offer Management</title>
    <!-- plugins:css -->
    <link
      rel="stylesheet"
      href="/public/assets/vendors/mdi/css/materialdesignicons.min.css"
    />
    <link
      rel="stylesheet"
      href="/public/assets/vendors/css/vendor.bundle.base.css"
    />
    <!-- endinject -->
    <!-- Layout styles -->
    <link rel="stylesheet" href="/public/assets/css/style.css" />
    <!-- End layout styles -->
    <link rel="shortcut icon" href="/public/assets/images/favicon.png" />
    <!-- Load jQuery from a CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  </head>
  <body>
    <div class="container-scroller">
      <!-- partial:partials/_sidebar.ejs -->
      <%- include('partials/_sidebar') %>
      <!-- partial -->
      <div class="container-fluid page-body-wrapper">
        <!-- partial:partials/_navbar.ejs -->
        <%- include('partials/_navbar', { pageType: 'offers' }) %>
        <!-- partial -->
        <div class="main-panel">
          <div class="content-wrapper">
            <div class="page-header">
              <h3 class="page-title">Offer Management</h3>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="/admin/dashboard">Admin</a>
                  </li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Offer
                  </li>
                </ol>
              </nav>
            </div>
            <div class="row">
              <div class="col-12 grid-margin">
                <div class="card">
                  <div class="card-body">
                    <div
                      class="d-flex justify-content-between align-items-center mb-4"
                    >
                      <h4 class="card-title">Offer Management</h4>
                      <button
                        class="btn btn-success"
                        data-toggle="modal"
                        data-target="#createOfferModal"
                      >
                        Create New Offer
                      </button>
                    </div>
                    <div class="table-responsive">
                      <table class="table">
                        <thead>
                          <tr>
                            <th>SI</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Discount Value</th>
                            <th>Applicable Type</th>
                            <th>Items</th>
                            <!-- <th>Active Status</th> -->
                            <th>Action</th>
                          </tr>
                        </thead>
                        <tbody>
                          <% offers.forEach((offer, idx) => { %>
                          <tr>
                            <td><%= ((current - 1) * perPage) + (idx + 1) %></td>
                            <td><%= offer.name %></td>
                            <td><%= offer.description %></td>
                            <td><%= offer.discountValue %>%</td>
                            <td><%= offer.applicableType.charAt(0).toUpperCase() + offer.applicableType.slice(1) %></td>
                            <!-- <td>
                              <span class="badge <%= offer.isActive ? 'badge-success' : 'badge-danger' %>">
                                <%= offer.isActive ? 'Active' : 'Inactive' %>
                              </span>
                            </td> -->
                            <td>
                              <% if (offer.applicableType === 'category') { %>
                                <% offer.categoryIds.forEach(category => { %>
                                  <span><%= category.name %></span><br>
                                <% }) %>
                              <% } else { %>
                                <% offer.productIds.forEach(product => { %>
                                  <span><%= product.name %></span><br>
                                <% }) %>
                              <% } %>
                            </td>
                            <td>
                              <!-- <button class="btn btn-sm btn-info" onclick="viewApplicableItems('<%= offer._id %>', '<%= offer.applicableType %>')">
                                View <%= offer.applicableType === 'product' ? 'Products' : 'Categories' %>
                              </button> -->
                              <button class="btn btn-primary" onClick="openEditOfferModal('<%= offer._id %>')">Edit</button>
                           
                              <button
                                id="listButton-<%= offer._id %>"
                                class="btn <%= offer.isActive ? 'btn-danger' : 'btn-success' %>"
                                onclick="confirmAndToggleListOffer('<%= offer._id %>', '<%= offer.isActive %>')"
                              >
                                <%= offer.isActive ? 'Deactivate' : 'Activate' %>
                              </button>
                            </td>
                          </tr>
                          <% }) %>
                        </tbody>
                      </table>
                      
                    </div>
                  </div>
                </div>
              </div>
              </div>

            <!-- Pagination -->
            <nav aria-label="Page navigation">
              <ul class="pagination justify-content-center">
                <% if (current > 1) { %>
                <li class="page-item">
                  <a
                    class="page-link"
                    href="?page=<%= current - 1 %>"
                    aria-label="Previous"
                  >
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
                <% } %> <% for (let i = 1; i <= pages; i++) { %>
                <li class="page-item <%= current === i ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
                <% } %> <% if (current < pages) { %>
                <li class="page-item">
                  <a
                    class="page-link"
                    href="?page=<%= current + 1 %>"
                    aria-label="Next"
                  >
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
                <% } %>
              </ul>
            </nav>
          </div>
        </div>
        </div>

        <!-- Modals for Create and Edit Offer -->
        <!-- Implement CreateOfferModal and EditOfferModal according to your requirements -->

        
        <!-- End Modals -->
        <!-- partial:partials/_footer.ejs -->
        <%- include('partials/_footer') %>
        <!-- partial -->
      </div>
      <!-- main-panel ends -->
    </div>
    <!-- page-body-wrapper ends -->
  </div>
  <!-- container-scroller -->
  <!-- Create Offer Modal -->
  <!-- Create Offer Modal -->
  <!-- Create/Edit Offer Modal -->
<!-- Create Offer Modal -->
<!-- Create Offer Modal -->
<div class="modal fade" id="createOfferModal" tabindex="-1" role="dialog" aria-labelledby="createOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createOfferModalLabel">Create New Offer</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="offerForm">
          <div class="form-group">
            <label for="offerName">Offer Name</label>
            <input type="text" class="form-control" id="offerName" required>
          </div>
          <div class="form-group">
            <label for="offerDescription">Description</label>
            <textarea class="form-control" id="offerDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="discountValue">Discount Value (%)</label>
            <input type="number" class="form-control" id="discountValue" required>
          </div>
          <div class="form-group">
            <label for="applicableType">Applicable Type</label>
            <select class="form-control" id="applicableType">
              <option value="product">Product</option>
              <option value="category">Category</option>
            </select>
          </div>
          <div class="form-group" id="applicableItemsContainer">
            <label>Applicable Items</label>
            <div id="applicableItems"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="createOffer()">Save Offer</button>
      </div>
    </div>
  </div>
</div>





    <script>// Event listener for applicable type dropdown change
      document.getElementById('applicableType').addEventListener('change', function() {
        const selectedType = this.value;
        console.log(selectedType)
        populateApplicableItemsCreate(selectedType);
      });
      
      // Function to fetch applicable items based on selected type
      function populateApplicableItemsCreate(type) {
        console.log("type = ",type)
        axios.get(`/admin/offers/api/applicable-items?type=${type}`)
          .then(response => {
            const container = document.getElementById('applicableItems');
            container.innerHTML = ''; // Clear previous items
      
            response.data.items.forEach(item => {
              const checkbox = document.createElement('div');
              checkbox.classList.add('form-check');
              checkbox.innerHTML = `
                <input class="form-check-input" type="checkbox" value="${item._id}" id="${item._id}">
                <label class="form-check-label" for="${item._id}">${item.name}</label>
              `;
              container.appendChild(checkbox);
            });
          })
          .catch(error => {
            console.error('Error fetching applicable items:', error);
          });
      }
      
      // Function to save the offer
     // Function to create a new offer
async function createOffer() {
  const applicableType = document.getElementById('applicableType').value;

  const offer = {
    name: document.getElementById('offerName').value,
    description: document.getElementById('offerDescription').value,
    discountValue: document.getElementById('discountValue').value,
    applicableType: applicableType,
    isActive: true, // Default active status
    categoryIds: [],
    productIds: []
  };

  // Collect selected IDs
  Array.from(document.querySelectorAll('#applicableItems input:checked')).forEach(input => {
    if (applicableType === 'category') {
      offer.categoryIds.push(input.value);
    } else {
      offer.productIds.push(input.value);
    }
  });

  try {
    const response = await axios.post('/admin/offers', offer);
    if (response.data.success) {
      $('#createOfferModal').modal('hide');
      window.location.reload(); // Refresh the table or data as needed
    } else {
      alert('Failed to create offer: ' + response.data.message);
    }
  } catch (error) {
    console.error('Error creating offer:', error);
    alert('Server error while creating offer.');
  }
}


// Event listener for the Save Offer button
document.getElementById('saveOfferButton').addEventListener('click', async () => {
  await createOffer(); 
});

      
      // Open the modal for creating or editing offers
      function openOfferModal(offerId = null) {
        // if (offerId) {
        //   fetchOfferDetails(offerId);
        // } else {
          document.getElementById('offerForm').reset();
          document.getElementById('createOfferModalLabel').textContent = 'Create New Offer';
          populateApplicableItems(document.getElementById('applicableType').value); // Fetch items for default applicable type
        // }
        $('#createOfferModal').modal('show');
      }
      
      // Fetch offer details for editing
      async function fetchOfferDetails(offerId) {
        try {
          const response = await axios.get(`/admin/offers/api/offers/${offerId}`);
          const offer = response.data.offer;
      
          document.getElementById('offerId').value = offer._id;
          document.getElementById('offerName').value = offer.name;
          document.getElementById('offerDescription').value = offer.description;
          document.getElementById('discountValue').value = offer.discountValue;
          document.getElementById('applicableType').value = offer.applicableType;
      
          // Populate offer items based on applicable type
          await populateApplicableItems(offer.applicableType);
      
          // Select the current items
          offer.categoryIds.forEach(itemId => {
            const checkbox = document.getElementById(itemId);
            if (checkbox) {
              checkbox.checked = true; // Check the corresponding checkbox
            }
          });
      
          document.getElementById('createOfferModalLabel').textContent = 'Edit Offer';
        } catch (error) {
          console.error('Error fetching offer details:', error);
        }
      }
      
      // Event listener for the Save Offer button
      document.getElementById('saveOfferButton').addEventListener('click', saveOffer);
      
    </script>


<!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1" role="dialog" aria-labelledby="editOfferModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editOfferModalLabel">Edit Offer</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="offerForm">
          <input type="hidden" id="offerId">
          <div class="form-group">
            <label for="offerName">Offer Name</label>
            <input type="text" class="form-control" id="offerName" required>
          </div>
          <div class="form-group">
            <label for="offerDescription">Description</label>
            <textarea class="form-control" id="offerDescription"></textarea>
          </div>
          <div class="form-group">
            <label for="discountValue">Discount Value (%)</label>
            <input type="number" class="form-control" id="discountValue" required>
          </div>
          <div class="form-group">
            <label for="applicableType">Applicable Type</label>
            <select class="form-control" id="applicableType" required>
              <option value="category">Category</option>
              <option value="product">Product</option>
            </select>
          </div>
          <div class="form-group" id="applicableItemsContainer">
            <!-- Dynamically populate the applicable items (categories/products) -->
            <label for="editApplicableItems">Applicable Items</label>
            <div id="editApplicableItems"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="saveOfferButton">Save changes</button>
      </div>
    </div>
  </div>
</div>

<script>
  // Open the edit modal and populate data
  async function openEditOfferModal(offerId) {
    try {
      const response = await axios.get(`/admin/offers/api/offers/${offerId}`);
      const { offer, categories, products } = response.data;

      // console.log("",{products, categories})

      // Populate the form with the offer details
      document.getElementById('offerId').value = offer._id;
      document.getElementById('offerName').value = offer.name;
      document.getElementById('offerDescription').value = offer.description;
      document.getElementById('discountValue').value = offer.discountValue;
      document.getElementById('applicableType').value = offer.applicableType;

      // Populate the applicable items (categories/products)
      populateApplicableItems(offer.applicableType, categories, products, offer);

      $('#editOfferModal').modal('show');
    } catch (error) {
      console.error('Error fetching offer details:', error);
    }
  }

  // Populate applicable items based on the selected type and check the related ones
  function populateApplicableItems(applicableType, categories, products, offer) {
    const container = document.getElementById('editApplicableItems');
    container.innerHTML = ''; // Clear previous items

    const items = applicableType === 'category' ? categories : products;
    const selectedIds = applicableType === 'category' ? offer.categoryIds.map(cat => cat._id) : offer.productIds.map(prod => prod._id);
    console.log(selectedIds)
    items.forEach(item => {
      const isChecked = selectedIds.includes(item._id);
      const checkbox = document.createElement('div');
      checkbox.classList.add('form-check');
      checkbox.innerHTML = `
        <input class="form-check-input" type="checkbox" value="${item._id}" id="${item._id}" ${isChecked ? 'checked' : ''}>
        <label class="form-check-label" for="${item._id}">${item.name}</label>
      `;
      container.appendChild(checkbox);
    });
  }

  // Save the edited offer
  async function saveEditedOffer() {
    const offerId = document.getElementById('offerId').value;
    const applicableType = document.getElementById('applicableType').value;

    const offer = {
      name: document.getElementById('offerName').value,
      description: document.getElementById('offerDescription').value,
      discountValue: document.getElementById('discountValue').value,
      applicableType: applicableType,
      isActive: true,
      categoryIds: [],
      productIds: []
    };

    // Collect selected IDs
    Array.from(document.querySelectorAll('#editApplicableItems input:checked')).forEach(input => {
      if (applicableType === 'category') {
        offer.categoryIds.push(input.value);
      } else {
        offer.productIds.push(input.value);
      }
    });

    try {
      const response = await axios.patch(`/admin/offers/${offerId}`, offer);
      if (response.data.success) {
        $('#editOfferModal').modal('hide');
        window.location.reload(); // Refresh the table or data as needed
      } else {
        alert('Failed to save offer: ' + response.data.message);
      }
    } catch (error) {
      console.error('Error saving offer:', error);
      alert('Server error while saving offer.');
    }
  }

  // Event listener for saving the edited offer
  document.getElementById('saveOfferButton').addEventListener('click', saveEditedOffer);
</script>

    

    <!-- plugins:js -->
    <script src="/public/assets/vendors/js/vendor.bundle.base.js"></script>
    <!-- endinject -->
    <!-- Plugin js for this page -->
    <!-- End plugin js for this page -->
    <!-- inject:js -->
    <script src="/public/assets/js/off-canvas.js"></script>
    <script src="/public/assets/js/hoverable-collapse.js"></script>
    <script src="/public/assets/js/misc.js"></script>
    <script src="/public/assets/js/settings.js"></script>
    <script src="/public/assets/js/todolist.js"></script>
    <!-- endinject -->
    <!-- Custom js for this page -->
    <script src="/public/assets/js/dashboard.js"></script>
    <!-- End custom js for this page -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"
    />

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
      function confirmAndToggleListOffer(id, isActive) {
        const action = isActive === "true" ? "Deactivate" : "Activate";
        const newStatus =  isActive === "true" ? false : true;
        console.log(newStatus)
    
        Swal.fire({
          text: `Are you sure you want to ${action} this offer?`,
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: `Yes, ${action} it!`,
        }).then((result) => {
          if (result.isConfirmed) {
            axios.put(`/admin/offers/${id}/toggle`, {
              isActive: newStatus,
            })
            .then((response) => {
              const data = response.data.offer; // Assuming response contains the updated offer
    
              // Select the button element using the offer id
              const buttonElement = document.getElementById(`listButton-${data._id}`);
    

              // Update button text and class based on the new status
              const resultText = data.isActive ? "Deactivate" : "Activate";
              const buttonClass = data.isActive ? "btn-danger" : "btn-success";
    
              // Update button properties
              buttonElement.className = `btn ${buttonClass}`;
              buttonElement.innerHTML = resultText;
              buttonElement.setAttribute("onclick", `confirmAndToggleListOffer("${data._id}", '${data.isActive}')`);
    
              Swal.fire(
                `${action}d!`,
                `Offer has been ${action.toLowerCase()}d.`,
                "success"
              );
            })
            .catch((error) => {
              Swal.fire(
                "Error",
                "There was a problem updating the offer status.",
                "error"
              );
            });
          }
        });
      }
    </script>
    

    
    <!-- <script>
      function handleDiscountTypeChange() {
        const discountType = document.getElementById("editDiscountType").value;
        const discountValueField = document.getElementById("editDiscountValue");

        // Clear any existing error or validation messages
        discountValueField.classList.remove("is-invalid");

        // Adjust the form based on the selected discount type
        if (discountType === "percentage") {
          discountValueField.placeholder = "Enter discount percentage";
          discountValueField.setAttribute("min", "0");
          discountValueField.setAttribute("max", "100");
        } else if (discountType === "flat") {
          discountValueField.placeholder = "Enter flat discount amount";
          discountValueField.removeAttribute("min");
          discountValueField.removeAttribute("max");
        } else {
          discountValueField.placeholder = "Enter discount value";
          discountValueField.removeAttribute("min");
          discountValueField.removeAttribute("max");
        }
      }
    </script> -->
  </body>
</html>
