<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Admin Dashboard</title>
    <!-- plugins:css -->
    <link
      rel="stylesheet"
      href="/public/assets/vendors/mdi/css/materialdesignicons.min.css"
    />
    <link
      rel="stylesheet"
      href="/public/assets/vendors/css/vendor.bundle.base.css"
    />
    <link rel="stylesheet" href="/public/assets/css/style.css" />
    <link rel="shortcut icon" href="/public/assets/images/favicon.png" />
    <!-- Include jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <style>
      /* Basic styling for modal */
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
      }
      .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        position: relative;
      }
      .close {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
      }
    </style>
    <style>
      /* Add these styles to your existing styles */
      .best-sellers-card {
        height: 100%;
      }
      .best-sellers-list {
        height: 300px;
        overflow-y: auto;
      }
      .best-sellers-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
      }
      .best-sellers-item img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        margin-right: 15px;
        border-radius: 5px;
      }
      .best-sellers-item-details {
        flex-grow: 1;
      }
      .best-sellers-item-name {
        font-weight: bold;
        margin-bottom: 5px;
        color: black;
      }
      .best-sellers-item-sales {
        font-size: 0.9em;
        color: #6c757d;
      }
    </style>
  </head>
  <body>
    <div class="container-scroller">
      <!-- Sidebar -->
      <%- include('partials/_sidebar') %>

      <!-- Main content -->
      <div class="container-fluid page-body-wrapper">
        <!-- Navbar -->
        <%- include('partials/_navbar') %>

        <!-- Main Panel -->
        <div class="main-panel">
          <div class="content-wrapper">
            <div class="page-header">
              <h3 class="page-title">Admin Dashboard</h3>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item"><a href="#">Charts</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Chart-js
                  </li>
                </ol>
              </nav>
            </div>

            <!-- Report Generation Form -->
            <div class="row">
              <div class="col-md-12 grid-margin">
                <div class="card">
                  <div class="card-body">
                    <h5 id="generateReport" class="card-title">
                      Generate Sales Report
                    </h5>
                    <form id="reportForm" novalidate>
                      <div class="form-group">
                        <label for="reportType">Select Report Type:</label>
                        <select
                          id="reportType"
                          name="reportType"
                          class="form-control"
                          required
                        >
                          <option value="default">Select...</option>
                          <option value="yearly">Yearly</option>
                          <option value="monthly">Monthly</option>
                          <option value="weekly">Weekly</option>
                          <option value="daily">Daily</option>
                          <option value="custom">Custom Range</option>
                        </select>
                        <div class="invalid-feedback">
                          Please select a report type.
                        </div>
                        <div class="valid-feedback">Looks good!</div>
                      </div>

                      <div
                        class="form-group"
                        id="customDateRange"
                        style="display: none"
                      >
                        <label for="startDate">Start Date:</label>
                        <input
                          type="date"
                          id="startDate"
                          name="startDate"
                          class="form-control"
                          required
                        />
                        <div class="invalid-feedback">
                          Please select a valid start date.
                        </div>
                        <div class="valid-feedback">Looks good!</div>

                        <label for="endDate">End Date:</label>
                        <input
                          type="date"
                          id="endDate"
                          name="endDate"
                          class="form-control"
                          required
                        />
                        <div class="invalid-feedback">
                          Please select a valid end date.
                        </div>
                        <div class="valid-feedback">Looks good!</div>
                      </div>

                      <button
                        type="button"
                        id="generateReportButton"
                        class="btn btn-danger"
                      >
                        PDF Report
                      </button>
                      <button
                        type="button"
                        id="generateExcelReportButton"
                        class="btn btn-success"
                      >
                        XLS Report
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>

            <!-- Best Selling Products and Categories -->
            <div class="row">
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card best-sellers-card">
                  <div class="card-body">
                    <h4 class="card-title">Top 3 Best Selling Categories</h4>
                    <div class="best-sellers-list">
                      <% topCategories.forEach((category, index) => { %>
                      <div class="best-sellers-item">
                        <!-- <img
                          src="/public/uploads/<%= category.image %>"
                          alt="<%= category.name %>"
                        /> -->
                        <div class="best-sellers-item-details">
                          <div class="best-sellers-item-name">
                            <%= index + 1 %>. <%= category.name %>
                          </div>
                          <div class="best-sellers-item-sales">
                            Sales: <%= category.sales %>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card best-sellers-card">
                  <div class="card-body">
                    <h4 class="card-title">Top 5 Best Selling Products</h4>
                    <div class="best-sellers-list">
                      <% topProducts.forEach((product, index) => { %>
                      <div class="best-sellers-item">
                        <img
                          src="/public/uploads/<%= product.image %>"
                          alt="<%= product.name %>"
                        />
                        <div class="best-sellers-item-details">
                          <div class="best-sellers-item-name">
                            <%= index + 1 %>. <%= product.name %>
                          </div>
                          <div class="best-sellers-item-sales">
                            Sales: <%= product.sales %>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- sales-chart.ejs -->
            <div class="row">
              <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <div
                      class="d-flex justify-content-between align-items-center mb-3"
                    >
                      <h2>Sales Chart</h2>
                      <select
                        id="timeRange"
                        class="form-select"
                        style="width: auto"
                      >
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly" selected>Monthly</option>
                        <option value="yearly">Yearly</option>
                      </select>
                    </div>
                    <canvas id="salesChart"></canvas>
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h2>Order Status Distribution</h2>
                    <canvas id="orderStatusChart"></canvas>
                  </div>
                </div>
              </div>
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h2>User Growth</h2>
                    <canvas id="userGrowthChart"></canvas>
                  </div>
                </div>
              </div>
            </div>

            <!-- Modal -->
            <div id="pdfModal" class="modal">
              <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <iframe
                  id="pdfIframe"
                  style="width: 100%; height: 600px; border: none"
                ></iframe>
                <button id="downloadPdf">Download PDF</button>
              </div>
            </div>
          </div>

          <!-- Footer -->
          <%- include('partials/_footer') %>
        </div>
      </div>
    </div>

    <!-- scripts -->
    <script src="/public/assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="/public/assets/js/off-canvas.js"></script>
    <script src="/public/assets/js/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- <script src="/public/assets/vendors/chart.js/Chart.min.js"></script> -->

    <script src="/public/assets/js/hoverable-collapse.js"></script>
    <!-- <script src="/public/assets/js/template.js"></script> -->
    <script src="/public/assets/js/settings.js"></script>
    <script src="/public/assets/js/todolist.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>
    <script>
      // document
      //   .getElementById("reportType")
      //   .addEventListener("change", function () {
      //     const customDateRange = document.getElementById("customDateRange");
      //     if (this.value === "custom") {
      //       customDateRange.style.display = "block";
      //     } else {
      //       customDateRange.style.display = "none";
      //     }
      //     document
      //       .getElementById("generateReportButton")
      //       .addEventListener("click", async () => {
      //   });

      document.addEventListener("DOMContentLoaded", function () {
        const reportType = document.getElementById("reportType");
        const startDate = document.getElementById("startDate");
        const endDate = document.getElementById("endDate");
        const customDateRange = document.getElementById("customDateRange");
        const generateReportButton = document.getElementById(
          "generateReportButton"
        );
        const generateExcelReportButton = document.getElementById(
          "generateExcelReportButton"
        );

        // Validate the report type on change
        reportType.addEventListener("change", function () {
          validateReportType();
          toggleCustomDateRange();
        });

        // Validate start date on change
        startDate.addEventListener("input", function () {
          validateDateRange();
        });

        // Validate end date on change
        endDate.addEventListener("input", function () {
          validateDateRange();
        });

        // PDF Report Generation Button Click
        generateReportButton.addEventListener("click", function (e) {
          if (validateForm()) {
            // All fields are valid, proceed with PDF generation
            generatePDFReport();
          } else {
            // Prevent form submission if fields are invalid
            e.preventDefault();
            alert(
              "Please fill out all required fields correctly before generating the report."
            );
          }
        });

        // Excel Report Generation Button Click
        generateExcelReportButton.addEventListener("click", function (e) {
          if (validateForm()) {
            // All fields are valid, proceed with Excel report generation
            generateExcelReport();
          } else {
            // Prevent form submission if fields are invalid
            e.preventDefault();
            alert(
              "Please fill out all required fields correctly before generating the report."
            );
          }
        });

        // Function to validate the report type
        function validateReportType() {
          reportType.classList.remove("is-invalid", "is-valid");

          if (reportType.value === "default") {
            reportType.classList.add("is-invalid");
            return false;
          } else {
            reportType.classList.add("is-valid");
            return true;
          }
        }

        // Function to show or hide the custom date range fields
        function toggleCustomDateRange() {
          if (reportType.value === "custom") {
            customDateRange.style.display = "block";
          } else {
            customDateRange.style.display = "none";
            resetDateFields(); // Reset date fields if custom is not selected
          }
        }

        // Function to validate the custom date range
        function validateDateRange() {
          let isValid = true;
          startDate.classList.remove("is-invalid", "is-valid");
          endDate.classList.remove("is-invalid", "is-valid");

          const start = new Date(startDate.value);
          const end = new Date(endDate.value);

          if (!startDate.value) {
            startDate.classList.add("is-invalid");
            isValid = false;
          } else {
            startDate.classList.add("is-valid");
          }

          if (!endDate.value) {
            endDate.classList.add("is-invalid");
            isValid = false;
          } else {
            endDate.classList.add("is-valid");
          }

          if (startDate.value && endDate.value && start > end) {
            startDate.classList.add("is-invalid");
            endDate.classList.add("is-invalid");
            isValid = false;
          }

          return isValid;
        }

        // Function to reset date fields
        function resetDateFields() {
          startDate.value = "";
          endDate.value = "";
          startDate.classList.remove("is-invalid", "is-valid");
          endDate.classList.remove("is-invalid", "is-valid");
        }

        // Function to validate the entire form
        function validateForm() {
          const isReportTypeValid = validateReportType();
          let isDateRangeValid = true;

          if (reportType.value === "custom") {
            isDateRangeValid = validateDateRange();
          }

          return isReportTypeValid && isDateRangeValid;
        }

        // Placeholder for actual PDF report generation logic
        async function generatePDFReport() {
          console.log("Generating PDF report...");
          // Add your PDF generation logic here
          try {
            const reportType = document.getElementById("reportType").value;
            const startDate = document.getElementById("startDate").value;
            const endDate = document.getElementById("endDate").value;

            // Send GET request to the server to fetch report data
            const response = await axios.get("/admin/reports", {
              params: {
                reportType: reportType, // Can be "daily", "weekly", "monthly", "yearly", or "custom"
                startDate: startDate,
                endDate: endDate,
              },
            });

            if (response.data.success) {
              const { sales, orders, discounts, overall } =
                response.data.ordersData;

              // Initialize jsPDF
              const { jsPDF } = window.jspdf;
              const doc = new jsPDF();
              doc.setFontSize(18);
              doc.text(
                `Sales Report - ${
                  reportType.charAt(0).toUpperCase() + reportType.slice(1)
                }`,
                14,
                22
              );

              let salesTableData = [];
              let ordersTableData = [];

              // Function to format the data based on the report type
              const formatDataByType = (type) => {
                if (type === "daily") {
                  salesTableData = sales.labels.map((label, index) => {
                    const totalSales = sales.values[index];
                    const discount = discounts.values[index];
                    const netSales = totalSales - discount;
                    return [
                      label, // Date-wise data for daily report
                      `$${totalSales.toFixed(2)}`,
                      `$${discount.toFixed(2)}`,
                      `$${netSales.toFixed(2)}`,
                    ];
                  });

                  ordersTableData = orders.labels.map((label, index) => {
                    return [label, `${orders.values[index]} orders`];
                  });
                } else if (type === "weekly") {
                  salesTableData = sales.labels.map((label, index) => {
                    const totalSales = sales.values[index];
                    const discount = discounts.values[index];
                    const netSales = totalSales - discount;
                    return [
                      `Week of ${label}`, // Week-wise data for weekly report
                      `$${totalSales.toFixed(2)}`,
                      `$${discount.toFixed(2)}`,
                      `$${netSales.toFixed(2)}`,
                    ];
                  });

                  ordersTableData = orders.labels.map((label, index) => {
                    return [
                      `Week of ${label}`,
                      `${orders.values[index]} orders`,
                    ];
                  });
                } else if (type === "monthly") {
                  salesTableData = sales.labels.map((label, index) => {
                    const totalSales = sales.values[index];
                    const discount = discounts.values[index];
                    const netSales = totalSales - discount;
                    return [
                      `Month of ${label}`, // Month-wise data for monthly report
                      `$${totalSales.toFixed(2)}`,
                      `$${discount.toFixed(2)}`,
                      `$${netSales.toFixed(2)}`,
                    ];
                  });

                  ordersTableData = orders.labels.map((label, index) => {
                    return [
                      `Month of ${label}`,
                      `${orders.values[index]} orders`,
                    ];
                  });
                } else if (type === "yearly") {
                  salesTableData = sales.labels.map((label, index) => {
                    const totalSales = sales.values[index];
                    const discount = discounts.values[index];
                    const netSales = totalSales - discount;
                    return [
                      `Year ${label}`, // Year-wise data for yearly report
                      `$${totalSales.toFixed(2)}`,
                      `$${discount.toFixed(2)}`,
                      `$${netSales.toFixed(2)}`,
                    ];
                  });

                  ordersTableData = orders.labels.map((label, index) => {
                    return [`Year ${label}`, `${orders.values[index]} orders`];
                  });
                } else if (type === "custom") {
                  salesTableData = sales.labels.map((label, index) => {
                    const totalSales = sales.values[index];
                    const discount = discounts.values[index];
                    const netSales = totalSales - discount;
                    return [
                      label, // Custom date range
                      `$${totalSales.toFixed(2)}`,
                      `$${discount.toFixed(2)}`,
                      `$${netSales.toFixed(2)}`,
                    ];
                  });

                  ordersTableData = orders.labels.map((label, index) => {
                    return [label, `${orders.values[index]} orders`];
                  });
                }
              };

              // Format the data based on the selected reportType
              formatDataByType(reportType);

              // Create sales data table with discounts and net sales
              doc.autoTable({
                head: [["Date/Period", "Sales", "Discount", "Net Sales"]],
                body: salesTableData,
                startY: 30,
              });

              // Create orders data table
              doc.autoTable({
                head: [["Date/Period", "Orders"]],
                body: ordersTableData,
                startY: doc.previousAutoTable.finalY + 10, // Set the start Y position after the previous table
              });

              // Add overall sales, order amount, and discount info
              doc.text(
                `Overall Sales Count: ${overall.salesCount}`,
                14,
                doc.previousAutoTable.finalY + 30
              );
              doc.text(
                `Overall Order Amount: $${overall.orderAmount.toFixed(2)}`,
                14,
                doc.previousAutoTable.finalY + 40
              );
              doc.text(
                `Overall Discount: $${overall.discount.toFixed(2)}`,
                14,
                doc.previousAutoTable.finalY + 50
              );

              // Convert PDF to Base64 and display it in the modal
              const pdfDataUri = doc.output("datauristring");
              document.getElementById("pdfIframe").src = pdfDataUri;

              // Show the modal
              document.getElementById("pdfModal").style.display = "flex";

              // Download button event listener
              document
                .getElementById("downloadPdf")
                .addEventListener("click", () => {
                  doc.save("sales-report.pdf");
                });
            } else {
              console.error("Failed to generate report:", response.statusText);
              alert(response.data.message);
            }
          } catch (error) {
            console.error("Error generating report:", error);
            if (
              error.response &&
              error.response.data &&
              error.response.data.message
            ) {
              alert(error.response.data.message);
            } else {
              alert("An unknown error occurred.");
            }
          }
        }

        // Placeholder for actual Excel report generation logic
        async function generateExcelReport() {
          console.log("Generating Excel report...");
          // Add your Excel generation logic here
          try {
            const reportType = document.getElementById("reportType").value;
            const startDate = document.getElementById("startDate").value;
            const endDate = document.getElementById("endDate").value;

            // Send GET request to the server to fetch report data
            const response = await axios.get("/admin/reports", {
              params: {
                reportType: reportType, // Can be "1-day", "1-week", "1-month", or "custom"
                startDate: startDate,
                endDate: endDate,
              },
            });

            if (response.data.success) {
              const { sales, orders, discounts, overall } =
                response.data.ordersData;

              // Create a new workbook
              const workbook = XLSX.utils.book_new();

              // Prepare the header row
              const reportData = [
                [
                  "Date",
                  "Total Sales ($)",
                  "Discount ($)",
                  "Net Sales ($)",
                  "Total Orders",
                ],
              ];

              // Prepare sales and orders data with discounts and net sales
              sales.labels.forEach((label, index) => {
                const totalSales = sales.values[index].toFixed(2);
                const discount = discounts.values[index].toFixed(2);
                const netSales = (
                  sales.values[index] - discounts.values[index]
                ).toFixed(2);
                const totalOrders = orders.values[index];

                reportData.push([
                  label,
                  totalSales,
                  discount,
                  netSales,
                  totalOrders,
                ]);
              });

              // Create a sheet for sales and orders data
              const reportSheet = XLSX.utils.aoa_to_sheet(reportData);

              // Append the sheet to the workbook
              XLSX.utils.book_append_sheet(
                workbook,
                reportSheet,
                "Sales and Orders Data"
              );

              // Add overall sales count, order amount, and discount info at the end
              const overallData = [
                ["Overall Sales Count", overall.salesCount],
                ["Overall Order Amount ($)", overall.orderAmount.toFixed(2)],
                ["Overall Discount ($)", overall.discount.toFixed(2)],
              ];
              const overallSheet = XLSX.utils.aoa_to_sheet(overallData);
              XLSX.utils.book_append_sheet(
                workbook,
                overallSheet,
                "Overall Report"
              );

              // Download the Excel file
              XLSX.writeFile(workbook, "sales-orders-report.xlsx");
            } else {
              console.error("Failed to generate report:", response.statusText);
              alert(response.data.message);
            }
          } catch (error) {
            console.error("Error generating Excel report:", error);
            alert("An error occurred while generating the Excel report.");
          }
          document
            .getElementById("reportType")
            .addEventListener("change", function () {
              const customRange = document.getElementById("customDateRange");
              if (this.value === "custom") {
                customRange.style.display = "block";
              } else {
                customRange.style.display = "none";
              }
            });
        }
      });
    </script>
    <script>
      // Show or hide custom date range fields based on report type
      // Generate report button event listener for PDF

      // document
      //   .getElementById("generateExcelReportButton")
      //   .addEventListener("click", async () => {
      // });

      function closeModal() {
        document.getElementById("pdfModal").style.display = "none";
      }
    </script>

    <!-- <script>
      // admin-charts.js

      // Monthly Sales Chart
      function createMonthlySalesChart() {
        const ctx = document
          .getElementById("monthlySalesChart")
          .getContext("2d");
        new Chart(ctx, {
          type: "line",
          data: {
            labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
            datasets: [
              {
                label: "Monthly Sales",
                data: [4000, 3000, 5000, 4500, 6000, 5500],
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
              },
            ],
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
              },
            },
          },
        });
      }

      // Top Selling Watches Chart
      function createTopSellingWatchesChart() {
        const ctx = document
          .getElementById("topSellingWatchesChart")
          .getContext("2d");
        new Chart(ctx, {
          type: "bar",
          data: {
            labels: [
              "Rolex Submariner",
              "Omega Speedmaster",
              "Tag Heuer Carrera",
              "Cartier Tank",
              "Patek Philippe Nautilus",
            ],
            datasets: [
              {
                label: "Units Sold",
                data: [300, 250, 200, 150, 100],
                backgroundColor: [
                  "rgba(255, 99, 132, 0.2)",
                  "rgba(54, 162, 235, 0.2)",
                  "rgba(255, 206, 86, 0.2)",
                  "rgba(75, 192, 192, 0.2)",
                  "rgba(153, 102, 255, 0.2)",
                ],
                borderColor: [
                  "rgba(255, 99, 132, 1)",
                  "rgba(54, 162, 235, 1)",
                  "rgba(255, 206, 86, 1)",
                  "rgba(75, 192, 192, 1)",
                  "rgba(153, 102, 255, 1)",
                ],
                borderWidth: 1,
              },
            ],
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
              },
            },
          },
        });
      }

      // Customer Segmentation Chart
      function createCustomerSegmentationChart() {
        const ctx = document
          .getElementById("customerSegmentationChart")
          .getContext("2d");
        new Chart(ctx, {
          type: "pie",
          data: {
            labels: ["Luxury", "Mid-range", "Entry-level"],
            datasets: [
              {
                data: [400, 300, 200],
                backgroundColor: [
                  "rgba(255, 99, 132, 0.8)",
                  "rgba(54, 162, 235, 0.8)",
                  "rgba(255, 206, 86, 0.8)",
                ],
              },
            ],
          },
          options: {
            responsive: true,
          },
        });
      }

      // Call these functions when the DOM is fully loaded
      document.addEventListener("DOMContentLoaded", function () {
        // const monthlySalesData = "<%- JSON.stringify(monthlySales) %>";

        createMonthlySalesChart();
        createTopSellingWatchesChart();
        createCustomerSegmentationChart();
      });
    </script> -->
    <script>
      let salesChart;

      function initChart(data) {
        const ctx = document.getElementById("salesChart").getContext("2d");
        salesChart = new Chart(ctx, {
          type: "line",
          data: {
            labels: data.labels,
            datasets: [
              {
                label: "Sales",
                data: data.values,
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
              },
            ],
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  callback: function (value, index, values) {
                    return "₹" + value.toLocaleString(); // Assuming Indian Rupees
                  },
                },
              },
            },
            tooltips: {
              callbacks: {
                label: function (tooltipItem, data) {
                  let label =
                    data.datasets[tooltipItem.datasetIndex].label || "";
                  if (label) {
                    label += ": ";
                  }
                  label += "₹" + tooltipItem.yLabel.toLocaleString();
                  return label;
                },
              },
            },
          },
        });
      }

      function updateChart(data) {
        salesChart.data.labels = data.labels;
        salesChart.data.datasets[0].data = data.values;
        salesChart.update();
      }

      function fetchChartData(timeRange) {
        axios
          .get(`/admin/reports/api/sales-data?range=${timeRange}`)
          .then((response) => {
            const data = response.data;
            if (salesChart) {
              updateChart(data);
            } else {
              initChart(data);
            }
          })
          .catch((error) => console.error("Error fetching chart data:", error));
      }

      document
        .getElementById("timeRange")
        .addEventListener("change", function () {
          fetchChartData(this.value);
        });

      // Initial chart load
      fetchChartData("monthly");
    </script>
    <script>
      function initOrderStatusChart(data) {
        const ctx = document
          .getElementById("orderStatusChart")
          .getContext("2d");
        new Chart(ctx, {
          type: "pie",
          data: {
            labels: data.labels,
            datasets: [
              {
                data: data.values,
                backgroundColor: [
                  "#FF6384",
                  "#36A2EB",
                  "#FFCE56",
                  "#4BC0C0",
                  "#9966FF",
                  "#FF9F40",
                  "#FF6384",
                ],
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: "right",
              },
              tooltip: {
                callbacks: {
                  label: function (context) {
                    let label = context.label || "";
                    if (label) {
                      label += ": ";
                    }
                    if (context.parsed !== null) {
                      label += context.parsed + " orders";
                    }
                    return label;
                  },
                },
              },
            },
          },
        });
      }

      function fetchOrderStatusData() {
        fetch("/admin/reports/api/order-status-data")
          .then((response) => response.json())
          .then((data) => {
            initOrderStatusChart(data);
          })
          .catch((error) =>
            console.error("Error fetching order status data:", error)
          );
      }

      // Load order status data when the page loads
      document.addEventListener("DOMContentLoaded", fetchOrderStatusData);
    </script>

    <!-- <script>
      let userCountChart;

      function initUserCountChart(data) {
        const ctx = document.getElementById("userCountChart").getContext("2d");
        userCountChart = new Chart(ctx, {
          type: "line",
          data: {
            labels: data.labels,
            datasets: [
              {
                label: "User Count",
                data: data.values,
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
                fill: false,
              },
            ],
          },
          options: {
            responsive: true,
            scales: {
              x: {
                type: "time",
                time: {
                  unit: "day",
                  displayFormats: {
                    day: "MMM d",
                  },
                },
                title: {
                  display: true,
                  text: "Date",
                },
              },
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: "User Count",
                },
              },
            },
          },
        });
      }

      function updateUserCountChart(data) {
        userCountChart.data.labels = data.labels;
        userCountChart.data.datasets[0].data = data.values;
        userCountChart.update();
      }

      function fetchUserCountData(timeRange = "monthly") {
        fetch(`/admin/reports/api/user-count-data?range=${timeRange}`)
          .then((response) => response.json())
          .then((data) => {
            if (userCountChart) {
              updateUserCountChart(data);
            } else {
              initUserCountChart(data);
            }
          })
          .catch((error) =>
            console.error("Error fetching user count data:", error)
          );
      }

      // Load user count data when the page loads
      document.addEventListener("DOMContentLoaded", () => fetchUserCountData());

      // Add event listener to update chart when time range changes
      document
        .getElementById("timeRange")
        .addEventListener("change", function () {
          fetchUserCountData(this.value);
        });
    </script> -->

    <script>
      function initUserGrowthChart(data) {
        const ctx = document.getElementById("userGrowthChart").getContext("2d");
        new Chart(ctx, {
          type: "line",
          data: {
            labels: data.labels,
            datasets: [
              {
                label: "New Users",
                data: data.values,
                borderColor: "#36A2EB",
                backgroundColor: "rgba(54, 162, 235, 0.2)",
                tension: 0.1,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: "top",
              },
              tooltip: {
                callbacks: {
                  label: function (context) {
                    let label = context.dataset.label || "";
                    if (label) {
                      label += ": ";
                    }
                    if (context.parsed.y !== null) {
                      label += context.parsed.y + " new users";
                    }
                    return label;
                  },
                },
              },
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: "Date",
                },
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: "Number of New Users",
                },
                suggestedMin: 0,
              },
            },
          },
        });
      }

      function fetchUserGrowthData() {
        fetch("/admin/reports/api/user-growth-data")
          .then((response) => response.json())
          .then((data) => {
            initUserGrowthChart(data);
          })
          .catch((error) =>
            console.error("Error fetching user growth data:", error)
          );
      }

      // Load user growth data when the page loads
      document.addEventListener("DOMContentLoaded", fetchUserGrowthData);
    </script>

    <script src="/public/user/js/validationUtils.js"></script>
  </body>
</html>
